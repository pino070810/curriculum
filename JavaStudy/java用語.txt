■ 開発
・ウォーターフォール開発
→仕様を完璧に決めてから開発。1つ1つの工程を完了させてから次の工程に移行する。
長所：完成品の品質を担保しやすく、進歩管理がしやすい　
短所：開発期間が長期化しやすく、開発期間が長期化しやすい。

・アジャイル開発
→作りたいシステムを大まかに決め、計画、設計、実装、テストの反復を繰り返す。
長所：短期間でシステム開発ができ、柔軟にシステム開発が行いやすい。
短所：進捗管理が難しい為、PMの存在が重要。

・スパイラル開発
→アジャイル開発と似た開発方法。試作品を完成させて、フィードバックを受け改良していく。
長所：臨機応変に仕様変更がしやすいうえ、品質重視の案件にも対応しやすい
短所：試作品を完成させる分開発コストが高騰しやすい。

・マイグレーション【migration】
→移行などの意味を持つ。システム、データなどを別の環境に移転したり、
　新しい環境に切り替えたりすることを意味する

・デグレーション【degradation】
→悪化などの意味を持つ。 プログラムの不具合を修正したときに、
　ほかに新たな不具合が出てくること

・デプロイ【deploy】
→配置するなどの意味を持つ。開発した機能やサービスを利用できる状態にすること。

コンフリクト 【conflict】
→競合 対立などの意味を持つ。複数の装置やプログラムなどが
　同じ資源を同時に利用しようとして競合状態になってしまうこと。

～環境～
・開発環境（ローカル）
→実際のサーバーにアップする前に、サイトの動作や表示確認を手持ちのパソコン内で行う為の環境のこと

・検証環境（ステージング）
→本番環境に条件を限りなく近づけた「最終テスト用に用いる、本番環境と類似のテスト環境」のこと

・本番環境
→ユーザーが実際にシステムを使う環境のこと。本番環境で実際に稼働させることをデプロイ、デプロイメントとも呼ぶ。

～設計書／仕様書～
・要件定義
→「何をどうシステム化するのか」を決めるのが要件定義

・基本設計書
→ どのような要件の機能を備えるかを具現化してまとめたもの
・詳細設計書
→基本設計をもとにして実際のプログラムが作れるようにシステムの詳細をまとめたもの

～テスト～
・単体テスト（UT）
→Unit Testing / ユニットテストのこと。1つの「関数」「モジュール」が正常に動作するかテストする

・結合テスト（CT／IT）
→Combined Test/Integration Test。複数の「関数」「モジュール」を組み合わせて、正常に動作するかテストする

・総合テスト（ST）
→System Test/システムテスト。実際の運用形態に沿ってテストする

～エビデンス／証跡～
→システムが稼働中の画面を記録したスクリーンショットや、システム稼働時に使用したデータファイル、各種ログなどを指す

～データパッチ～
・更新・修正するために、新しい版との相違点（差分）を抜き出したデータのこと

～Access～
→ソフトウェア、システム、情報などを利用可能な状態にすること。

～マクロ～
→複数の操作をまとめて呼び出す機能のこと

・VBA
→Visual Basic for Applications。マイクロソフトが開発した、Microsoft Office製品で動くプログラムを作るためのプログラミング言語

～GAS（Google Apps Script）～
→Googleが提供しているJavaScriptをベースにしたプログラミング言語。Googleから提供されているサービスを自分で自由に連携させることができる

～API～
→Application Programming Interfaceの略称。何かしらのサービス提供者が、そのサービスを利用するために提供するインタフェースのこと

・WEB API
→API提供者とAPI利用者とのやりとりをHTTP／HTTPSベースで実現するAPI。異なるプログラミング言語で開発されたアプリ間を連携させることが可能で汎用性が高い。

・REST API
→RESTの考え方をWeb APIに適用したもの

・SOAP
→XMLを利用したWebサービス連携プロトコル。

～Ajax～
→あるWebページを表示した状態のまま、別のページや再読込などを伴わずにWebサーバ側と通信を行い、動的に表示内容を変更する手法。

・XML
→Extensible Markup Languageの略。






