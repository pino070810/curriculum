■ 開発
・ウォーターフォール開発
→仕様を完璧に決めてから開発。1つ1つの工程を完了させてから次の工程に移行する。
長所：完成品の品質を担保しやすく、進歩管理がしやすい　
短所：開発期間が長期化しやすく、開発期間が長期化しやすい。

・アジャイル開発
→作りたいシステムを大まかに決め、計画、設計、実装、テストの反復を繰り返す。
長所：短期間でシステム開発ができ、柔軟にシステム開発が行いやすい。
短所：進捗管理が難しい為、PMの存在が重要。

・スパイラル開発
→アジャイル開発と似た開発方法。試作品を完成させて、フィードバックを受け改良していく。
長所：臨機応変に仕様変更がしやすいうえ、品質重視の案件にも対応しやすい
短所：試作品を完成させる分開発コストが高騰しやすい。

・マイグレーション【migration】
→移行などの意味を持つ。システム、データなどを別の環境に移転したり、
　新しい環境に切り替えたりすることを意味する

・デグレーション【degradation】
→悪化などの意味を持つ。 プログラムの不具合を修正したときに、
　ほかに新たな不具合が出てくること

・デプロイ【deploy】
→配置するなどの意味を持つ。開発した機能やサービスを利用できる状態にすること。

コンフリクト 【conflict】
→競合 対立などの意味を持つ。複数の装置やプログラムなどが
　同じ資源を同時に利用しようとして競合状態になってしまうこと。

～環境～
・開発環境（ローカル）
→実際のサーバーにアップする前に、サイトの動作や表示確認を手持ちのパソコン内で行う為の環境のこと

・検証環境（ステージング）
→本番環境に条件を限りなく近づけた「最終テスト用に用いる、本番環境と類似のテスト環境」のこと

・本番環境
→ユーザーが実際にシステムを使う環境のこと。本番環境で実際に稼働させることをデプロイ、デプロイメントとも呼ぶ。

～設計書／仕様書～
・要件定義
→「何をどうシステム化するのか」を決めるのが要件定義

・基本設計書
→ どのような要件の機能を備えるかを具現化してまとめたもの
・詳細設計書
→基本設計をもとにして実際のプログラムが作れるようにシステムの詳細をまとめたもの

～テスト～
・単体テスト（UT）
→Unit Testing / ユニットテストのこと。1つの「関数」「モジュール」が正常に動作するかテストする

・結合テスト（CT／IT）
→Combined Test/Integration Test。複数の「関数」「モジュール」を組み合わせて、正常に動作するかテストする

・総合テスト（ST）
→System Test/システムテスト。実際の運用形態に沿ってテストする

～エビデンス／証跡～
→システムが稼働中の画面を記録したスクリーンショットや、システム稼働時に使用したデータファイル、各種ログなどを指す

～データパッチ～
・更新・修正するために、新しい版との相違点（差分）を抜き出したデータのこと

～Access～
→ソフトウェア、システム、情報などを利用可能な状態にすること。

～マクロ～
→複数の操作をまとめて呼び出す機能のこと

・VBA
→Visual Basic for Applications。マイクロソフトが開発した、Microsoft Office製品で動くプログラムを作るためのプログラミング言語

～GAS（Google Apps Script）～
→Googleが提供しているJavaScriptをベースにしたプログラミング言語。Googleから提供されているサービスを自分で自由に連携させることができる

～API～
→Application Programming Interfaceの略称。何かしらのサービス提供者が、そのサービスを利用するために提供するインタフェースのこと

・WEB API
→API提供者とAPI利用者とのやりとりをHTTP／HTTPSベースで実現するAPI。異なるプログラミング言語で開発されたアプリ間を連携させることが可能で汎用性が高い。

・REST API
→RESTの考え方をWeb APIに適用したもの

・SOAP
→XMLを利用したWebサービス連携プロトコル。

～Ajax～
→あるWebページを表示した状態のまま、別のページや再読込などを伴わずにWebサーバ側と通信を行い、動的に表示内容を変更する手法。

・XML【Extensible Markup Language】
→マークアップ言語のひとつ。HTMLと異なりデータ記述用の言語で、要素名などのデータ構造を自由に定義できるため、情報を効率よくPCに伝えられる。

・JSON【JavaScript Object Notation】
→JavaScriptのオブジェクト記法を用いたデータ交換フォーマット。クライアント言語とサーバサイド言語間のデータのやり取りで使われることが多い。

・ステータスコード
→システムが処理結果や現在の状態を外部に知らせるために発する数字や短い符号。問題発生時にその種類や状態を知らせるものは「エラーコード」

・クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
→Webサーバに特殊なHTTPヘッダ項目を追加することで、送り出したWebページ上のスクリプトがWebブラウザから別のサーバへアクセスできるようにすること。

～バリデーション～
→入力内容や記述内容が要件を満たしているか、妥当性を確認すること

～データ連携～

・Daemon
→UNIX系OSでメインメモリ上に常駐して特定の機能を提供するプログラム。利用者の操作とは無関係に処理を行うバックグラウンドプロセスの一種。

・CRON
→Daemonの一つ。利用者の設定したスケジュールに従って指定されたプログラムを定期的に起動してくれるもの。

・バッチ(処理)
→「ひと束」などの意味。あらかじめ登録した一連の処理を自動的に実行する処理方式のこと。

・ログ
→コンピュータの利用状況やデータ通信など履歴や情報の記録を取る事、またその記録のこと。

・CSV【Comma-Separated Values】 カンマ区切り / コンマ区切り
→テキストデータの形式の一つで、項目をカンマ「,」で区切って列挙したもの。 複数の項目をレコードとしてまとめる場合は、改行でレコードの区切りを表す。

・TSV【Tab-Separated Values】 タブ区切り / .tsvファイル
→複数の項目で構成されるデータを複数件列挙して表現することができる汎用的なデータ形式の一つで、項目間の区切り文字にタブ文字を用いるもの。

～プルリクエスト～
→分散バージョン管理システム（VCS）の機能の一つで、コードなどを追加・修正した際、本体への反映を他の開発者に依頼する機能。

■ チケット管理ツール(タスク管理ツール)
～asana～
→直感的に使えるリスト形式のUIで、タスク管理だけでなくプロジェクト管理まで行える機能が充実している。
また、他ツールとの連携も可能で用途にあわせてカスタマイズできる。

～Backlog～
→直感的でシンプルなUI。チームでの業務に特化したタスク・プロジェクト管理ツール。
ガントチャートやマイルストーンといった機能を使えば、プロジェクトの進捗を一目で把握できる。

～Jooto～
→クラウド型カンバン式のタスク・プロジェクト管理ツール。プロジェクトを横断したタスク管理まで実現でき、
プロジェクト全体やメンバーの進捗状況の把握し易い。

～Readmine～
→オープンソースのタスク管理ツール。自社サーバーにインストールして使うオンプレミス型
タスク管理以外の機能としては時間管理やWikiなどがあり、Web開発などをスムーズにすすめるのに長けている。

～Trello～
→カンバン形式のタスク管理ツール。誰にでも使い易いUIと機能を備えている。

■ バージョン管理

～集中型～
→1つのリポジトリをメンバー間で共有。編集する際はそのリポジトリからソースコードを持ってきて編集し、編集が終わったら直接反映する。
サーバに接続できない環境の場合、最新のソースコードを取得やファイル編集の反映ができない。

～分散型～
→リモートリポジトリの他に開発者それぞれがローカルにリポジトリを持つ。オフライン環境でも作業を進めたり、
開発者のローカルリポジトリ自体がバックアップの役割を持つ。

～Github～
→分散型のバージョン管理システム。

～Backlog～
→直感的でシンプルなUI。チームでの業務に特化したタスク・プロジェクト管理ツール。
ガントチャートやマイルストーンといった機能を使えば、プロジェクトの進捗を一目で把握できる。

～SourceTree～
→Atlassian社が提供するGitの分散管理システムツール操作を効率的に扱うGUI

～Tortoise SVN～
→Subversionを元にしたフロントエンドの一種であり、Microsoft Windowsのシェル拡張として機能する。

～Git Flow～
→Gitにおけるリポジトリの分岐モデルであり、ルールのことを指す。それぞれのブランチを明確に定義し、勝手にブランチを作成し混乱することを防ぐ。

・master
→プロダクトとしてリリースする用のブランチ。リリースしたらタグ付けする。

・release
→プロダクトリリースの準備用。リリース予定の機能やバグフィックスが反映された状態のdevelopから分岐する。リリース準備が整ったら、masterにマージすると共にdevelopにマージする。

・develop
→開発用ブランチ。コードが安定し、リリース準備ができたらreleaseへマージする。

・feature
→機能の追加用。developから分岐し、developにマージする。

■ FW／ライブラリ
～FW(フレームワーク)～
→ソフトウェアに必要とされる汎用的な機能や基本的な制御構造をまとめた半完成品のこと

・Spring Framework
→Javaの開発環境で使用できるオープンソースのフレームワーク。AOPとDIと呼ばれる概念で構築されており、さらに専用のテストプログラムがある。

・Struts(ストラッツ)
→正式名は「Apache Struts」。Apache Software Foundationによって開発されているフレームワーク。
MVC（Model-View-Controller）と呼ばれるアーキテクチャによって、Java Servlet APIやJSP（JavaServer Pages）などを用いたサーバーサイドのWebアプリケーションを構築することができる。

・JSF（Java Server Faces）
→Java EEに搭載されたJava言語におけるフレームワークの一種。MVCモデルを採用しており、分業をしてシステム開発が行いやすい。

～ライブラリ～
→ある特定の機能を持つプログラムを定型化して、他のプログラムが引用できる状態にしたものを、複数集めてまとめたファイルのこと。

・Bootstrap
→Twitter社が開発したCSSのフレームワーク。よく使われるスタイルがあらかじめ定義されており、ルールに沿って利用するだけで整ったデザインのページを作成できる。

・Flyway
→DBマイグレーションフレームワークの一つ。複数人でのアプリケーション開発時のDBマイグレーション作業を素早く手軽に行うことができる。
(マイグレーションとは、ソフトウェア・アプリケーションやハードウェア、システム、データ、開発言語などを別の環境に移行したり、新しい環境に切り替えたりする事を意味する)

・Jackson
→JSON（※）形式のデータを処理するためのJavaライブラリ。
(JSON（ジェイソン、JavaScript Object Notation）は、JavaScriptにおけるオブジェクトの表記法をベースとしたデータ記述言語。Java EE 7にも、JSONを扱うためのAPI(JSR 353: Java API for JSON Processing)が標準で取り込まれている。)

・jQuery
→JavaScriptでできることを、より簡単な記法で実現できように設計されたJavaScriptライブラリ。ほとんどブラウザの違いを意識せずにプログラミングができる。

・Junit
→Javaで開発されたプログラムにおいてユニットテスト（単体テスト）の自動化を行うためのフレームワーク。

・Log4j
→正式名は「Apache log4j」。Java プログラム用のロギングユーティリティ（API）で、高速かつ高い柔軟性があり多彩なログ出力先を指定できる。
(ロギングユーティリティとは、プログラム内部から、デバッグ情報やエラー情報などのログデータを、コンソール、ファイル、その他ログサーバなどヘ出力する機能)

・Lombok
→Java特有の冗長なコードを簡潔にしてくれるライブラリ。Eclipseの場合、自動生成機能の代わりにアノテーションを使うことで冗長なコードを簡潔にする。

・ORM(Object-Relational Mapping)
→オブジェクトと関係（関係データベース、RDB）とのマッピングを行うもの。言語のオブジェクトを扱う際に、そのオブジェクトをRDBに保存できるように対応付けを簡単にすることができる。

■ 連絡ツール

・ChatWork
→Chatwork株式会社が提供する多機能チャットツール。チャットが使えるだけでなく、pdf・画像ファイルの送信など行える。

・Slack
→Slack Technology社が提供する多機能チャットツール。幅広い利用環境が用意されており、更にはGoogle等の連携できる外部ツールが多い。

・IP Messenger
→同一 LAN 環境内に閉じた連絡ツール。外部サーバーへ接続せず、同じネットワーク環境上の端末間でメッセージやファイルのやりとりができる。

■ Java
～Javadoc～（Javaドキュメンテーション）
→

～アノテーション～（annotation、注釈）
→Java言語のソースコードに一定の書式でコメントを記述することで、クラスの説明やメソッドの呼び出し方などの仕様をHTMLなどの文書形式でまとめてくれる仕組み。

～メモリ管理～
・ヒープ
→OSやアプリケーションソフトが使用するメモリ領域の一種。用途に関係なく自由に確保することができる。

・GC(ガベージ・コレクション)
→プログラムが確保したメモリ領域のうち、不要になった箇所だけを解放してくれる機能。

～GoF～(Gang of Four)
→オブジェクト指向プログラミングにおける再利用性の高いコーディングのパターン、デザインパターンをまとめた4人のプログラマのことを指す。
また、そのデザインパターンは23種類あり、「よく見かける機能要件（解決したい問題）」と「各機能要件に対応する設計方針」が整理されている。

～デザインパターン～
→オブジェクト指向において色んなプログラムで再利用できる設計パターンのこと

■ その他

～オブジェクト指向～
→プログラムを手順ではなくて、モノの作成と操作として見る考え方(概念)。
クラス(設計図)を元にインスタンス(オブジェクト)を生成することで変更や機能を追加する際に負担を減らせる。

～バッチ処理～
→あらかじめ登録した一連の処理を自動的に実行する処理方式のこと。

～コンパイル～
→プログラミング言語で書かれたソースコードを解析し、コンピュータが直接実行可能な形式のプログラム（オブジェクトコード）に変換すること。

～カバレッジ～
→ソフトウェアのプログラム全体に対してテストが終了（カバー）した割合や、実行可能な条件の中でどのテストが済んだのかを表す。

～プラットホーム(プラットフォーム)～
→ソフトウェアが動作するための土台を指す。

